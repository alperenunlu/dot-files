ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nvim'
else
  export EDITOR='vim'
fi

zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab

zinit snippet OMZP::git
zinit snippet OMZP::conda
zinit snippet OMZP::brew
zinit snippet OMZP::gnu-utils
zinit snippet OMZP::iterm2
zinit snippet OMZP::macos
zinit snippet OMZP::pip
zinit snippet OMZP::python

autoload -U compinit && compinit

zinit cdreplay -q

HISTIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
LANG=en_US.UTF-8

bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups
setopt autocd

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'

alias ls='ls --color=auto'
alias la='ls -lAh'

eval "$(fzf --zsh)"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/alperenunlu/miniforge3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/alperenunlu/miniforge3/etc/profile.d/conda.sh" ]; then
        . "/Users/alperenunlu/miniforge3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/alperenunlu/miniforge3/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/Users/alperenunlu/miniforge3/etc/profile.d/mamba.sh" ]; then
    . "/Users/alperenunlu/miniforge3/etc/profile.d/mamba.sh"
fi
# <<< conda initialize <<<

#------------------------------------------------------------------------------------------------------------------

# >>> rustup initialize >>>
. "$HOME/.cargo/env"
# <<< rustup initialize <<<

#------------------------------------------------------------------------------------------------------------------

upgrade() {
	if [ -z "$1" ]; then
		echo "Upgrading Homebrew & Mamba"
		brew update && brew upgrade --greedy
		mamba env update -f $HOME/environment.yml
	elif [ "$1" = "all" ]; then
		echo "Upgrading all"
		brew update && brew upgrade --greedy
		mamba env update -f $HOME/environment.yml
		nvim --headless "+Lazy! sync" +qa > /dev/null 2>&1
		nvim --headless +MasonToolsUpdateSync +qa > /dev/null 2>&1
		rustup self update && rustup update
		code --update-extensions
	elif [ "$1" = "brew" ]; then
		echo "Upgrading Homebrew"
		brew update && brew upgrade --greedy
	elif [ "$1" = "mamba" ]; then
		echo "Upgrading Mamba"
		mamba env update -f $HOME/environment.yml
	elif [ "$1" = "nvim" ]; then
		echo "Upgrading Neovim"
		nvim --headless "+Lazy! sync" +qa > /dev/null 2>&1
		nvim --headless +MasonToolsUpdateSync +qa > /dev/null 2>&1
	elif [ "$1" = "rust" ]; then
		echo "Upgrading Rust"
		rustup self update && rustup update
	elif [ "$1" = "code" ]; then
		echo "Upgrading VSCode Extensions"
		code --update-extensions
	else
		echo "Invalid argument"
	fi
}

clean() {
	if [ -z "$1" ]; then
		echo "Cleaning Homebrew, Mamba & Pip"
		brew autoremove
		brew cleanup --prune all
		mamba clean -ay
		pip cache purge
	elif [ "$1" = "brew" ]; then
		echo "Cleaning Homebrew"
		brew autoremove
		brew cleanup --prune all
	elif [ "$1" = "mamba" ]; then
		echo "Cleaning Mamba"
		mamba clean -ay
	elif [ "$1" = "pip" ]; then
		echo "Cleaning Pip"
		pip cache purge
	else
		echo "Invalid argument"
	fi
}

trash() {
	mv "$@" $HOME/.Trash
}

export PYTHON="$HOME/miniforge3/envs/deep/bin/python"

export CONDA_JL_HOME="$HOME/miniforge3/envs/deep"

export PYTORCH_ENABLE_MPS_FALLBACK=1
export TORCH_PATH="$HOME/miniforge3/envs/deep/lib/python3.11/site-packages/torch/include"
export TORCH_API_PATH="$HOME/miniforge3/envs/deep/lib/python3.11/site-packages/torch/include/torch/csrc/api/include"

alias axbrew='arch -x86_64 /usr/local/bin/brew'
alias yt='yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best"'
alias deep='mamba activate deep'
alias k='kill -KILL %1'
alias rpi-ssh='ssh alperenunlu@raspberrypi.local'
alias matlab='/Applications/MATLAB_R2024a.app/bin/matlab'

alias release-g++='g++-14 -O2 -DNDEBUG -pedantic-errors -Wall -Weffc++ -Wextra -Wconversion -Wsign-conversion -Werror -std=c++2c -o release'
alias debug-g++='g++-14 -ggdb -gdwarf -pedantic-errors -Wall -Weffc++ -Wextra -Wconversion -Wsign-conversion -Werror -std=c++2c -o debug'

alias cs-ssh='ssh -p 16222 workspace@127.0.0.1'

source ~/.secrets
# bindkey "^X\\x7f" backward-kill-line

deep

eval "$(starship init zsh)"

